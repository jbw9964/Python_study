
힙 트리는 매우 유용한 자료구조 중 하나이다. 힙은 항상 완전 이진 트리의 형태를 띄어야 하고 부모의 값은 항상 자식들의 값보다
크거나 (Max Heap) 작아야 (Min Heap) 한다. 때문에 힙의 루트노드에는 항상 데이터들 중 가장 큰 값 (혹은 작은 값) 이 저장되어있어 이를 파악하기 
매우 적합하다.

힙은 여러 방식으로 구현될 수 있는데, 이 중 배열을 이용한 방식을 보자. 배열을 이용해 구현하면 다음의 힙을 간단히 나타낼 수 있다.

(힙 트리로 저장된 데이터)
                                    1
                            L                R
                       L1       L2      R1       R2
(힙 배열로 저장된 데이터)
[1, L, R, L1, L2, R1, R2]

이렇게 배열로 나타내면 한가지 특징을 가지는데, 배열에서 i 번째 노드의 왼쪽 자식은 (2 * i) 번째, 오른쪽 자식은 (2 * i + 1) 번째에 위치한다는 것이다.
첫번째 노드인 1의 왼쪽 자식은 2번째에 위치하고 오른쪽 자식은 3번째에 위치한다.
두번째 노드인 L의 왼쪽 자식 L1 은 4 (2 * 2) 번째에 위치하고 오른쪽 자식은 5 (2 * 2 + 1) 번째에 위치한다.

어떤 배열이 주어졌을 때, 이 배열이 힙 배열인지 확인하여라. min heap 이라면 1, max heap 이라면 2, heap 이 아니라면 -1을 출력하여라.
이 때 부모의 값은 자식의 값과 같을수도 있다.

[입/출력 예시]
<input> / <output>
1 2 3 4 5 6 7 8 9

--> 1

<input> / <output>
9 8 7 6 5 4 3 2 1

--> 2

<input> / <output>
3 15 30 35 24 33 46 79 94 33 83 96 79 76 59

--> 1

<input> / <output>
2 3 4 43 6 31 59 70 60 27 31 98 36 90 97 

--> 1

<input> / <output>
84 64 77 60 30 68 50 41 32 19 17 11 1 6 26

--> 2

<input> / <output>
98 95 78 48 30 51 76 24 26 25 4 42 44 54 66

--> 2

<input> / <output>
1 3 9 4 5 2 10

--> -1

<input> / <output>
9 7 5 2 3 4 3 3

--> -1