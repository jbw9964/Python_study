
BFS 1 : 힙 배열 문제 - 주어진 배열이 힙인지 판별하라

[해결 방안] : Breadth first search

문제에서 주어진 대로 진행하면 된다. 입력된 배열의 Root Node 와 그 자식들을 비교해
입력된 배열이 Min heap 일지, Max heap 일지 판별한다. 
또한 List 내 숫자들에 대한 index 값 지정을 편하게 하기 위해, List 의 첫번째에 빈 숫자를 넣어준다.

List.insert(0, 0)

Min_heap = False
Max_heap = False

if List[1] <= List[2] and List[1] <= List[3]: Min_heap = True
else : Max_heap = True

편의를 위해 Length 와 index_count 를 초기화 해주고 while 문을 돌린다.

지금 방문한 Node 의 값을 Parent 로 초기화 해준다.
또한 방문한 Node 에 자식이 존재하지 않는다면, 더이상 확인할 필요가 없으므로 while 문을 break 해준다.

(오른쪽 자식 : 2 * index_count + 1 / 왼쪽 자식 : 2 * index_count)

if 2 * index_count + 1 > Length and 2 * index_count > Length : break
Parent = List[index_count]

이제 Parent 의 자식을 지정해준다. 위의 조건에서 자식이 모두 없는 경우는 배제되지만,
자식이 하나만 (왼쪽 자식만 있을 경우. 힙은 완전 이진 트리이므로 오른쪽 자식만 잇는 경우는 없다.) 존재할 경우가 있으므로 이를 구현해준다.

Child = []
Child.append(List[2 * index_count])
if not 2 * index_count + 1 > Length : 
    Child.append(List[2 * index_count + 1])

이제 위 Child 값들을 Parent 값과 비교한다.
Min_heap 배열이여야 하는데 Parent > child 인 경우, Max_heap 배열이여야 하는데 Parent < child 인 경우는
힙 배열이 아닌 경우이므로 더이상 확인하지 않고 while 문을 중단한다.

for child in Child : 
        
        if Min_heap and child < Parent : 
            Min_heap = False
            break
        
        elif Max_heap and child > Parent : 
            Max_heap = False
            break
        
if not Min_heap and not Max_heap : break
index_count += 1

while 문을 탈출하면 해당 배열이 무엇인지 판명난 상태이므로 이에 맞게 출력한다.