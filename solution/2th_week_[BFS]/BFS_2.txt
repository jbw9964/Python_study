
BFS 2 : 주차장 문제 - 주어진 주차장에 주차하게될 공간을 나타내어라

[해결 방안] : Breadth first search

문제의 상황은 크게 두가지로 나눌 수 있다.
주차장 내에 여유로운 공간이 있는 경우, 그렇지 않고 출구와 가장 가까운 곳에 주차하는 경우이다.
문제에서 여유로운 공간이 다수 존재한다면 출구에서 가장 가까운 곳에 주차하라 하였으므로,
결국 입구보다 출구를 중심으로 탐색을 돌리는 것이 현명해 보인다.

만약 해당 입력에서 깊이우선 탐색을 진행한다면, 출구와의 거리에 대해 따로 처리를 진행해야 하므로
편의를 위해 너비우선 탐색을 진행하였다.

방문한 Node 에서 진행할 수 있는 도로를 저장할 Queue, 근처에 주차할 수 있는 공간을 저장할 parking_queue 를 만들었다.
또한 Node 들의 방문 여부를 저장할 Visit_table 을 만들었다. 또한 출구에서 탐색을 진행할 것이므로
Queue 에 [N - 1, N - 1], 출구의 index 를 넣었다.

Queue = deque()
parking_queue = deque()
Queue.append([N - 1, N - 1])

Visit_table = [[False for _ in range(N)] for _ in range(N)]

이제 while 문을 돌리며 Queue 를 pop 한다. Queue 에서 나온 Node 를 방문처리 하고
해당 Node 의 상하좌우 Node 를 검사한다.

while Queue : 
    R, C = Queue.popleft()
    Visit_table[R][C] = True

    for r, c in ([R-1,C],[R+1,C],[R,C-1],[R,C+1]) : 

만약 Node 의 상하좌우 Node 중 입력 범위를 넘어간다면 이를 무시하고, 
Node 의 값이 0 이면 이는 도로이므로 Queue 에, 1 이라면 주차공간 이므로 parking_queue 에 저장한다.
편의를 위해 parking_queue 에 저장하면서 방문 처리를 동시에 해준다.

        if not (0<=r<N and 0<=c<N) : continue

        if G[r][c] == 0 and not Visit_table[r][c] : 
            Queue.append([r, c])
        elif G[r][c] == 1 and not Visit_table[r][c] : 
            Visit_table[r][c] = True
            parking_queue.append([r, c])


while 문을 탈출했다면 parking_queue 에는 도로에서 접근 가능한 모든 주차공간이 저장되어 있다.

만약 주차가능 공간 중 여유로운 공간이 없다면 출구에서 가장 가까운 곳을 나타내어야 한다.
그런데 우리는 너비우선 탐색을 진행하였으므로, 출구에서 가장 가까운 주차공간은 parking_queue[0] 에 저장되어 있음을 알 수 있다.
따라서 답을 출력할 Result 에 편의를 위해 parking_queue[0] 값을 초기화 시켜 둔다.

Result = [parking_queue[0][0], parking_queue[0][1]]

이제 주차 가능한 공간 중 여유로운 공간이 있는지 확인해야 한다. 이 때 여유로운 공간이 다수 존재하면
출구에서 가장 가까운 곳을 나타내어야 되므로 parking_queue 를 pop 시키며 진행한다.

while parking_queue : 
    R, C = parking_queue.popleft()

만약 pop 된 공간에서 상,하 또는 좌,우 모두 주차 가능하다면 이 공간은 여유로운 공간이므로,
Result 를 해당 공간으로 초기화 시켜주고 while 문을 중지시킨다.

    count = 0
    for r, c in ([R+1,C],[R-1,C]) :             # 아래,위
        
        if not (0<=r<N and 0<=c<N) : continue
        
        if G[r][c] == 1 : count += 1

    if count == 2 : 
        Result = [R, C]
        break

    count = 0
    for r, c in ([R,C+1],[R,C-1]) :             # 오른,왼
        
        if not (0<=r<N and 0<=c<N) : continue
        
        if G[r][c] == 1 : count += 1
    
    if count == 2 : 
        Result = [R, C]
        break

결국 Result 에는 조건에 부합하는 정답이 들어있으므로, 출력 형태에 맞게 나타내면 된다.