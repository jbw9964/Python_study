
문제 1 : 블랙잭 문제 - N 개의 주어진 수 중 3개를 조합하여 M 보다 크지 않으면서 가장 가까운 수를 구하여라

[해결 방안] : 입력 간단화 / brute-force

문제 풀이 : 

문제를 보면 N 개의 숫자가 정렬되지 않은채로 입력된다. 이 수들은 모두 T 보다 작더라도 이 중 답에 포함될 수 없는 숫자가 분명히 존재한다.
문제의 예시 입력 2번째는 다음과 같다.

8 100
16 85 30 14 95 63 52 87

이를 편의를 위해 정렬하면 14 16 30 52 63 85 87 95 이다. 그런데 이 중 95, 87, 85 는 답에 포함되지 않는 것을 알 수 있다.
왜냐하면 숫자의 조합 중 95, 87, 85 가 들어가는 조합은 모두 입력 T, 100 보다 큰 값이 나오기 때문이다. 때문에 아래의 코드처럼 입력을 간단화 시키는 과정을 만들었다.

List.sort()

while True : 
    if List[len(List) - 1] + List[0] >= T : 
        List.pop()
    elif List[len(List) - 1] + List[0] + List[1] > T : 
        List.pop()
    else : break

이 과정을 거치면 입력은 다음처럼 간추려진다. 
14 16 30 52 63
따라서 위 숫자 중 100 보다 작은 조합을 만들 수 없는 수는 없다.

이후에는 brute-force 방식으로 답을 이끌어 내었다.
하나의 수를 지정하고 그 수가 들어가는 조합 중 가장 큰 값을 저장하였다.
또한 이때 수들이 정렬되어 있음을 이용한다.

(첫째 수 : i, 둘째 수 : j, 셋째 수 : k)

temp_max = 0
for i in range(len(List) - 1, 1, -1) : 
    
    target = T - List[i]
    for j in range(i - 1, 0, -1) : 
        
        if target - List[j] > 0 : 
            temp_target = target - List[j]

            for k in range(j - 1, -1, -1) : 
                
                if List[k] <= temp_target : 
                    temp_max = max(List[i] + List[j] + List[k], temp_max)
                    break
                
print(temp_max)

(i)
편의를 위해 처음에 지정하는 수는 큰 순서대로 지정하였다.    --> 63, 52, ...     (첫번째 for 문)
이제 나머지 두 수의 합은 T - (지정된 숫자) 보다 작아야 하므로 이를
target = T - List[i] 
라고 지정하였다.

(j)
이제 두번째 수를 지정한다. j 는 i 보다 작으면서 target 보다 작은 수여야 한다. (63)일때 --> 52(x) 30(o) ...
이때 수들은 정렬되어 있으므로, j 는 항상 i 보다 작다.
때문에 j 가 target 보다 작은 수인지만 확인하면 된다.
또한 i + j + k 는 T 보다 작아야 하므로 k 는 T - i - j 보다 작아야 한다. 이를 저장해 둘 temp_target 을 지정한다.
temp_target = target - List[j]      --> target = T - List[i] 였음.

(k)
마지막으로 세번째 수를 지정한다. 위에서 말했듯 k 는 T - i - j = temp_target 보다 작아야 한다.
수들이 정렬되어 있으므로 남아있는 수 중, 가장 큰 값부터 위 조건에 부합하는지 확인한다.
만약 조건에 부합한다면, i + j + k 값을 temp_max 에 저장한다.

위 과정을 첫번째 수 i 를 달리하며 진행하고, temp_max = max(List[i] + List[j] + List[k], temp_max) 라 하여
이전에 진행한 값보다 지금 진행한 수가 크다면, 이를 바꿔 temp_max 에 지정하도록 한다.
이를 모두 진행하면 temp_max 에는 만들어지는 수의 조합 중, 가장 큰 값이 되므로 temp_max 값이 문제의 답이다.


문제 2 : 줄다리기 문제 - 가장 비등하게 승부가 나도록 팀을 나누어라

[해결 방안] : sort

주어진 입력을 편의를 위해 다음처럼 저장하였다.

List = list(map(int, input().split()))
List = [[i, v] for i, v in enumerate(List, 1)]

이러면 각 학생의 번호와 힘을 모두 저장할 수 있다.
위 배열을 sorted 메소드와 lamdba 함수를 이용해 힘의 크기 순으로 내림차순 정렬을 하였다.

List = sorted(List, key=lambda x : x[1], reverse=True)

정렬 후 각 학생들을 넣어둘 Team_1 과 Team_2 를 지정하였고, 두 팀의 힘을 나타낼 sum_1 과 sum_2 를 지정하였다.

Team_1 = []
Team_2 = []

sum_1 = 0
sum_2 = 0

이제 List 에서 한 학생씩 팀에 넣는다. 넣으면서 학생의 힘만큼 해당 팀의 sum 값을 높인다.
만약 sum_2 > sum_1 이라면 Team_1 에 학생을 넣고, 그렇지 않다면 Team_2 에 넣는다.

for student, power in List : 
    
    if sum_1 < sum_2 : 
        sum_1 += power
        Team_1.append(student)
        
    else : 
        sum_2 += power
        Team_2.append(student)

모든 학생들을 팀에 넣은 후, 문제의 조건에 따라 알맞게 출력하면 된다.